##
## PLP - Devoir 2
## Grammaire EBNF de notre language
## Nicolas Crausaz & Maxime Scharwath
##

# Expressions définies dans le language
expr -> value
      | identifier
      | varOccur
      | funApp
      | letIn
      | caseOf
      | unaryExpr
      | binaryExpr

# Types primitifs
char -> ( [a-z] | [A-Z] )
bool -> ( True | False )
num -> [0-9]
int -> { num }
tuple -> "(" value "," value ")"
value -> ( bool | int | tuple )

# Identifiants et déclarations
alphaNumName -> char { char | int }
identifier -> ( varIdent | funIdent )
varIdent -> "#v" alphaNumName "=" value
funIdent -> "#f" alphaNumName [{ identifier }] "#>" expr "#"


# Occurences et Applications
varOccur -> alphaNumName
funApp -> alphaNumName "(" [{ expr }] ")"


# Let-in
letIn -> "#l" { identifier } "#>" expr

# Case of
caseOf -> "#case" expr { caseBranch } "#"
caseBranch -> "#o" ( varOccur | value ) "#>" expr "#"


# Opérateurs

unary -> ( "-" | "!" )
arithmetic -> ( "+" | "-" | "*" | "/" | "%" )
comparison -> ( "==" | "!=" | "<" | ">" | "<=" | ">=" )
binary -> ( arithmetic | comparison )

unaryExpr -> unary expr
binaryExpr -> expr binary expr