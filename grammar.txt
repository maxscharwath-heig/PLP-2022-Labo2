##
## PLP - Devoir 2
## Grammaire EBNF de notre language
## Nicolas Crausaz & Maxime Scharwath
##

# Expressions définies dans le language
expr -> value
      | identifier
      | varOccur
      | funApp
      | letIn
      | caseOf
      | unaryExpr
      | binaryExpr

# Types primitifs
char -> ( [a-z] | [A-Z] )
bool -> ( True | False )
num -> [0-9]
int -> { num }
tuple -> "(" value "," value ")"
value -> ( bool | int | tuple )

# Identifiants et déclarations
alphaNumName -> char { char | int }
identifier -> ( varIdent | funIdent )
varIdent -> "#v" alphaNumName "#>" value
funIdent -> "#f" alphaNumName [{ identifier }] "#>" expr "#"


# Occurences et Applications
varOccur -> alphaNumName
funApp -> alphaNumName "(" [{ expr }] ")"


# Let-in
letIn -> "#l" { identifier } "#>" expr

# Case of
caseOf -> "#case" expr { caseBranch } "#"
caseBranch -> "#o" ( varOccur | value ) "#>" expr "#"


# Opérateurs

unary -> ( "-" | "!" )
arithmetic -> ( "+" | "-" | "*" | "/" | "%" )
comparison -> ( "==" | "!=" | "<" | ">" | "<=" | ">=" )
binary -> ( arithmetic | comparison )

unaryExpr -> unary expr
binaryExpr -> expr binary expr


##
## Exemple d'utilisation
##

Ce language s'appelle #ier (se prononce `hachier`).


## Entiers
1
15

## Booléens
True
false
FALSE

## Tuples

(1, false)
(1, 2, 3)
(TRUE, (FALSE, TRUE, 23))
(TRUE, (false, (true, (false, false))))

## Opérateurs
1 + 1
1 + -1
3 * 4
5 * 1
5 / 1
9 % 2
4 < 9
1 > 20
5 >= 2
1 != 1
1 == 1
true && false
FALSE || TRUE

## Variables - déclaration

#v name #> 10

## Variables - occurence

name

## Let in

#l 
   #v a #> 1 
   #v b #> 2 
#> a + b


## Case of

#case var 
    #o 1 #> 
        2 
    #
    #o 3 #> 
        1 
    #
    #o 5 #> 
        10 
    # 
    #> 
        -6 
    # 
#

## Fonctions - définition

#f name p1, p2 #> p1 + p2 #


## Fonctions - application

name (1, 2)