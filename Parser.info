-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------

state 6 contains 1 shift/reduce conflicts.
state 30 contains 1 shift/reduce conflicts.
state 31 contains 1 shift/reduce conflicts.
state 49 contains 1 shift/reduce conflicts.
state 50 contains 1 shift/reduce conflicts.
state 51 contains 1 shift/reduce conflicts.
state 52 contains 1 shift/reduce conflicts.
state 53 contains 1 shift/reduce conflicts.
state 54 contains 1 shift/reduce conflicts.
state 55 contains 13 shift/reduce conflicts.
state 56 contains 1 shift/reduce conflicts.
state 57 contains 1 shift/reduce conflicts.
state 58 contains 1 shift/reduce conflicts.
state 59 contains 1 shift/reduce conflicts.
state 60 contains 1 shift/reduce conflicts.
state 61 contains 1 shift/reduce conflicts.
state 69 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Expr                              (0)
	Expr -> Expr "+" Expr                              (1)
	Expr -> Expr "-" Expr                              (2)
	Expr -> Expr "*" Expr                              (3)
	Expr -> Expr "/" Expr                              (4)
	Expr -> Expr "%" Expr                              (5)
	Expr -> Expr "<" Expr                              (6)
	Expr -> Expr ">" Expr                              (7)
	Expr -> Expr "==" Expr                             (8)
	Expr -> Expr "!=" Expr                             (9)
	Expr -> Expr "<=" Expr                             (10)
	Expr -> Expr ">=" Expr                             (11)
	Expr -> Expr "&&" Expr                             (12)
	Expr -> Expr "||" Expr                             (13)
	Expr -> "(" Expr ")"                               (14)
	Expr -> "(" Exprs ")"                              (15)
	Expr -> "!" Expr                                   (16)
	Expr -> identifier                                 (17)
	Expr -> identifier "(" Exprs ")"                   (18)
	Expr -> funDecSym identifier identifiers in Expr end   (19)
	Expr -> varDec                                     (20)
	Expr -> int                                        (21)
	Expr -> bool                                       (22)
	Expr -> case Expr caseOfs in Expr end end          (23)
	Expr -> let MultiExprs in Expr end                 (24)
	Exprs -> Expr                                      (25)
	Exprs -> Expr "," Exprs                            (26)
	MultiExprs -> Expr                                 (27)
	MultiExprs -> Expr MultiExprs                      (28)
	identifiers -> identifier                          (29)
	identifiers -> identifier "," identifiers          (30)
	caseOf -> of Expr in Expr end                      (31)
	caseOfs -> caseOf                                  (32)
	caseOfs -> caseOf caseOfs                          (33)
	varDec -> varDecSym identifier in Expr             (34)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TInt $$ }
	bool           { TBool $$ }
	identifier     { TIdentifier $$ }
	varDecSym      { TVarDec }
	funDecSym      { TFunDec }
	"("            { TSym '(' }
	")"            { TSym ')' }
	"<"            { TSym '<' }
	">"            { TSym '>' }
	"+"            { TSym '+' }
	"-"            { TSym '-' }
	"*"            { TSym '*' }
	"/"            { TSym '/' }
	"%"            { TSym '%' }
	"!"            { TSym '!' }
	let            { TLet }
	in             { TIn }
	case           { TCase }
	of             { TOf }
	","            { TSym ',' }
	end            { TEnd }
	"=="           { TDSym "==" }
	"!="           { TDSym "!=" }
	"<="           { TDSym "<=" }
	">="           { TDSym ">=" }
	"&&"           { TDSym "&&" }
	"||"           { TDSym "||" }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	Exprs           rules 25, 26
	MultiExprs      rules 27, 28
	identifiers     rules 29, 30
	caseOf          rule  31
	caseOfs         rules 32, 33
	varDec          rule  34

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Expr                             (rule 0)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 13
	varDec         goto state 3

State 1

	Expr -> . Expr "+" Expr                             (rule 1)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 2
	varDec         goto state 3

State 2

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 3

	Expr -> varDec .                                    (rule 20)

	int            reduce using rule 20
	bool           reduce using rule 20
	identifier     reduce using rule 20
	varDecSym      reduce using rule 20
	funDecSym      reduce using rule 20
	"("            reduce using rule 20
	")"            reduce using rule 20
	"<"            reduce using rule 20
	">"            reduce using rule 20
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	"%"            reduce using rule 20
	"!"            reduce using rule 20
	let            reduce using rule 20
	in             reduce using rule 20
	case           reduce using rule 20
	of             reduce using rule 20
	","            reduce using rule 20
	end            reduce using rule 20
	"=="           reduce using rule 20
	"!="           reduce using rule 20
	"<="           reduce using rule 20
	">="           reduce using rule 20
	"&&"           reduce using rule 20
	"||"           reduce using rule 20
	%eof           reduce using rule 20


State 4

	Expr -> int .                                       (rule 21)

	int            reduce using rule 21
	bool           reduce using rule 21
	identifier     reduce using rule 21
	varDecSym      reduce using rule 21
	funDecSym      reduce using rule 21
	"("            reduce using rule 21
	")"            reduce using rule 21
	"<"            reduce using rule 21
	">"            reduce using rule 21
	"+"            reduce using rule 21
	"-"            reduce using rule 21
	"*"            reduce using rule 21
	"/"            reduce using rule 21
	"%"            reduce using rule 21
	"!"            reduce using rule 21
	let            reduce using rule 21
	in             reduce using rule 21
	case           reduce using rule 21
	of             reduce using rule 21
	","            reduce using rule 21
	end            reduce using rule 21
	"=="           reduce using rule 21
	"!="           reduce using rule 21
	"<="           reduce using rule 21
	">="           reduce using rule 21
	"&&"           reduce using rule 21
	"||"           reduce using rule 21
	%eof           reduce using rule 21


State 5

	Expr -> bool .                                      (rule 22)

	int            reduce using rule 22
	bool           reduce using rule 22
	identifier     reduce using rule 22
	varDecSym      reduce using rule 22
	funDecSym      reduce using rule 22
	"("            reduce using rule 22
	")"            reduce using rule 22
	"<"            reduce using rule 22
	">"            reduce using rule 22
	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	"%"            reduce using rule 22
	"!"            reduce using rule 22
	let            reduce using rule 22
	in             reduce using rule 22
	case           reduce using rule 22
	of             reduce using rule 22
	","            reduce using rule 22
	end            reduce using rule 22
	"=="           reduce using rule 22
	"!="           reduce using rule 22
	"<="           reduce using rule 22
	">="           reduce using rule 22
	"&&"           reduce using rule 22
	"||"           reduce using rule 22
	%eof           reduce using rule 22


State 6

	Expr -> identifier .                                (rule 17)
	Expr -> identifier . "(" Exprs ")"                  (rule 18)

	int            reduce using rule 17
	bool           reduce using rule 17
	identifier     reduce using rule 17
	varDecSym      reduce using rule 17
	funDecSym      reduce using rule 17
	"("            shift, and enter state 35
			(reduce using rule 17)

	")"            reduce using rule 17
	"<"            reduce using rule 17
	">"            reduce using rule 17
	"+"            reduce using rule 17
	"-"            reduce using rule 17
	"*"            reduce using rule 17
	"/"            reduce using rule 17
	"%"            reduce using rule 17
	"!"            reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	case           reduce using rule 17
	of             reduce using rule 17
	","            reduce using rule 17
	end            reduce using rule 17
	"=="           reduce using rule 17
	"!="           reduce using rule 17
	"<="           reduce using rule 17
	">="           reduce using rule 17
	"&&"           reduce using rule 17
	"||"           reduce using rule 17
	%eof           reduce using rule 17


State 7

	varDec -> varDecSym . identifier in Expr            (rule 34)

	identifier     shift, and enter state 34


State 8

	Expr -> funDecSym . identifier identifiers in Expr end    (rule 19)

	identifier     shift, and enter state 33


State 9

	Expr -> "(" . Expr ")"                              (rule 14)
	Expr -> "(" . Exprs ")"                             (rule 15)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 31
	Exprs          goto state 32
	varDec         goto state 3

State 10

	Expr -> "!" . Expr                                  (rule 16)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 30
	varDec         goto state 3

State 11

	Expr -> let . MultiExprs in Expr end                (rule 24)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 28
	MultiExprs     goto state 29
	varDec         goto state 3

State 12

	Expr -> case . Expr caseOfs in Expr end end         (rule 23)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 27
	varDec         goto state 3

State 13

	%start_parser -> Expr .                             (rule 0)
	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26
	%eof           accept


State 14

	Expr -> Expr "<" . Expr                             (rule 6)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 61
	varDec         goto state 3

State 15

	Expr -> Expr ">" . Expr                             (rule 7)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 60
	varDec         goto state 3

State 16

	Expr -> Expr "+" . Expr                             (rule 1)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 59
	varDec         goto state 3

State 17

	Expr -> Expr "-" . Expr                             (rule 2)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 58
	varDec         goto state 3

State 18

	Expr -> Expr "*" . Expr                             (rule 3)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 57
	varDec         goto state 3

State 19

	Expr -> Expr "/" . Expr                             (rule 4)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 56
	varDec         goto state 3

State 20

	Expr -> Expr "%" . Expr                             (rule 5)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 55
	varDec         goto state 3

State 21

	Expr -> Expr "==" . Expr                            (rule 8)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 54
	varDec         goto state 3

State 22

	Expr -> Expr "!=" . Expr                            (rule 9)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 53
	varDec         goto state 3

State 23

	Expr -> Expr "<=" . Expr                            (rule 10)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 52
	varDec         goto state 3

State 24

	Expr -> Expr ">=" . Expr                            (rule 11)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 51
	varDec         goto state 3

State 25

	Expr -> Expr "&&" . Expr                            (rule 12)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 50
	varDec         goto state 3

State 26

	Expr -> Expr "||" . Expr                            (rule 13)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 49
	varDec         goto state 3

State 27

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Expr -> case Expr . caseOfs in Expr end end         (rule 23)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	of             shift, and enter state 48
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26

	caseOf         goto state 46
	caseOfs        goto state 47

State 28

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	MultiExprs -> Expr .                                (rule 27)
	MultiExprs -> Expr . MultiExprs                     (rule 28)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	in             reduce using rule 27
	case           shift, and enter state 12
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26

	Expr           goto state 28
	MultiExprs     goto state 45
	varDec         goto state 3

State 29

	Expr -> let MultiExprs . in Expr end                (rule 24)

	in             shift, and enter state 44


State 30

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Expr -> "!" Expr .                                  (rule 16)

	int            reduce using rule 16
	bool           reduce using rule 16
	identifier     reduce using rule 16
	varDecSym      reduce using rule 16
	funDecSym      reduce using rule 16
	"("            reduce using rule 16
	")"            reduce using rule 16
	"<"            reduce using rule 16
	">"            reduce using rule 16
	"+"            reduce using rule 16
	"-"            reduce using rule 16
	"*"            reduce using rule 16
	"/"            reduce using rule 16
	"%"            shift, and enter state 20
			(reduce using rule 16)

	"!"            reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	case           reduce using rule 16
	of             reduce using rule 16
	","            reduce using rule 16
	end            reduce using rule 16
	"=="           reduce using rule 16
	"!="           reduce using rule 16
	"<="           reduce using rule 16
	">="           reduce using rule 16
	"&&"           reduce using rule 16
	"||"           reduce using rule 16
	%eof           reduce using rule 16


State 31

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Expr -> "(" Expr . ")"                              (rule 14)
	Exprs -> Expr .                                     (rule 25)
	Exprs -> Expr . "," Exprs                           (rule 26)

	")"            shift, and enter state 42
			(reduce using rule 25)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	","            shift, and enter state 43
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 32

	Expr -> "(" Exprs . ")"                             (rule 15)

	")"            shift, and enter state 41


State 33

	Expr -> funDecSym identifier . identifiers in Expr end    (rule 19)

	identifier     shift, and enter state 40

	identifiers    goto state 39

State 34

	varDec -> varDecSym identifier . in Expr            (rule 34)

	in             shift, and enter state 38


State 35

	Expr -> identifier "(" . Exprs ")"                  (rule 18)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 36
	Exprs          goto state 37
	varDec         goto state 3

State 36

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Exprs -> Expr .                                     (rule 25)
	Exprs -> Expr . "," Exprs                           (rule 26)

	")"            reduce using rule 25
	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	","            shift, and enter state 43
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 37

	Expr -> identifier "(" Exprs . ")"                  (rule 18)

	")"            shift, and enter state 70


State 38

	varDec -> varDecSym identifier in . Expr            (rule 34)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 69
	varDec         goto state 3

State 39

	Expr -> funDecSym identifier identifiers . in Expr end    (rule 19)

	in             shift, and enter state 68


State 40

	identifiers -> identifier .                         (rule 29)
	identifiers -> identifier . "," identifiers         (rule 30)

	in             reduce using rule 29
	","            shift, and enter state 67


State 41

	Expr -> "(" Exprs ")" .                             (rule 15)

	int            reduce using rule 15
	bool           reduce using rule 15
	identifier     reduce using rule 15
	varDecSym      reduce using rule 15
	funDecSym      reduce using rule 15
	"("            reduce using rule 15
	")"            reduce using rule 15
	"<"            reduce using rule 15
	">"            reduce using rule 15
	"+"            reduce using rule 15
	"-"            reduce using rule 15
	"*"            reduce using rule 15
	"/"            reduce using rule 15
	"%"            reduce using rule 15
	"!"            reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	case           reduce using rule 15
	of             reduce using rule 15
	","            reduce using rule 15
	end            reduce using rule 15
	"=="           reduce using rule 15
	"!="           reduce using rule 15
	"<="           reduce using rule 15
	">="           reduce using rule 15
	"&&"           reduce using rule 15
	"||"           reduce using rule 15
	%eof           reduce using rule 15


State 42

	Expr -> "(" Expr ")" .                              (rule 14)

	int            reduce using rule 14
	bool           reduce using rule 14
	identifier     reduce using rule 14
	varDecSym      reduce using rule 14
	funDecSym      reduce using rule 14
	"("            reduce using rule 14
	")"            reduce using rule 14
	"<"            reduce using rule 14
	">"            reduce using rule 14
	"+"            reduce using rule 14
	"-"            reduce using rule 14
	"*"            reduce using rule 14
	"/"            reduce using rule 14
	"%"            reduce using rule 14
	"!"            reduce using rule 14
	let            reduce using rule 14
	in             reduce using rule 14
	case           reduce using rule 14
	of             reduce using rule 14
	","            reduce using rule 14
	end            reduce using rule 14
	"=="           reduce using rule 14
	"!="           reduce using rule 14
	"<="           reduce using rule 14
	">="           reduce using rule 14
	"&&"           reduce using rule 14
	"||"           reduce using rule 14
	%eof           reduce using rule 14


State 43

	Exprs -> Expr "," . Exprs                           (rule 26)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 36
	Exprs          goto state 66
	varDec         goto state 3

State 44

	Expr -> let MultiExprs in . Expr end                (rule 24)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 65
	varDec         goto state 3

State 45

	MultiExprs -> Expr MultiExprs .                     (rule 28)

	in             reduce using rule 28


State 46

	caseOfs -> caseOf .                                 (rule 32)
	caseOfs -> caseOf . caseOfs                         (rule 33)

	in             reduce using rule 32
	of             shift, and enter state 48

	caseOf         goto state 46
	caseOfs        goto state 64

State 47

	Expr -> case Expr caseOfs . in Expr end end         (rule 23)

	in             shift, and enter state 63


State 48

	caseOf -> of . Expr in Expr end                     (rule 31)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 62
	varDec         goto state 3

State 49

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Expr -> Expr "||" Expr .                            (rule 13)

	int            reduce using rule 13
	bool           reduce using rule 13
	identifier     reduce using rule 13
	varDecSym      reduce using rule 13
	funDecSym      reduce using rule 13
	"("            reduce using rule 13
	")"            reduce using rule 13
	"<"            reduce using rule 13
	">"            reduce using rule 13
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 13)

	"!"            reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	case           reduce using rule 13
	of             reduce using rule 13
	","            reduce using rule 13
	end            reduce using rule 13
	"=="           reduce using rule 13
	"!="           reduce using rule 13
	"<="           reduce using rule 13
	">="           reduce using rule 13
	"&&"           reduce using rule 13
	"||"           reduce using rule 13
	%eof           reduce using rule 13


State 50

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr "&&" Expr .                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 12
	bool           reduce using rule 12
	identifier     reduce using rule 12
	varDecSym      reduce using rule 12
	funDecSym      reduce using rule 12
	"("            reduce using rule 12
	")"            reduce using rule 12
	"<"            reduce using rule 12
	">"            reduce using rule 12
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 12)

	"!"            reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	case           reduce using rule 12
	of             reduce using rule 12
	","            reduce using rule 12
	end            reduce using rule 12
	"=="           reduce using rule 12
	"!="           reduce using rule 12
	"<="           reduce using rule 12
	">="           reduce using rule 12
	"&&"           reduce using rule 12
	"||"           reduce using rule 12
	%eof           reduce using rule 12


State 51

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr ">=" Expr .                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 11
	bool           reduce using rule 11
	identifier     reduce using rule 11
	varDecSym      reduce using rule 11
	funDecSym      reduce using rule 11
	"("            reduce using rule 11
	")"            reduce using rule 11
	"<"            reduce using rule 11
	">"            reduce using rule 11
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 11)

	"!"            reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	case           reduce using rule 11
	of             reduce using rule 11
	","            reduce using rule 11
	end            reduce using rule 11
	"=="           reduce using rule 11
	"!="           reduce using rule 11
	"<="           reduce using rule 11
	">="           reduce using rule 11
	"&&"           reduce using rule 11
	"||"           reduce using rule 11
	%eof           reduce using rule 11


State 52

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr "<=" Expr .                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 10
	bool           reduce using rule 10
	identifier     reduce using rule 10
	varDecSym      reduce using rule 10
	funDecSym      reduce using rule 10
	"("            reduce using rule 10
	")"            reduce using rule 10
	"<"            reduce using rule 10
	">"            reduce using rule 10
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 10)

	"!"            reduce using rule 10
	let            reduce using rule 10
	in             reduce using rule 10
	case           reduce using rule 10
	of             reduce using rule 10
	","            reduce using rule 10
	end            reduce using rule 10
	"=="           reduce using rule 10
	"!="           reduce using rule 10
	"<="           reduce using rule 10
	">="           reduce using rule 10
	"&&"           reduce using rule 10
	"||"           reduce using rule 10
	%eof           reduce using rule 10


State 53

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr "!=" Expr .                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 9
	bool           reduce using rule 9
	identifier     reduce using rule 9
	varDecSym      reduce using rule 9
	funDecSym      reduce using rule 9
	"("            reduce using rule 9
	")"            reduce using rule 9
	"<"            reduce using rule 9
	">"            reduce using rule 9
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 9)

	"!"            reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	case           reduce using rule 9
	of             reduce using rule 9
	","            reduce using rule 9
	end            reduce using rule 9
	"=="           reduce using rule 9
	"!="           reduce using rule 9
	"<="           reduce using rule 9
	">="           reduce using rule 9
	"&&"           reduce using rule 9
	"||"           reduce using rule 9
	%eof           reduce using rule 9


State 54

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr "==" Expr .                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 8
	bool           reduce using rule 8
	identifier     reduce using rule 8
	varDecSym      reduce using rule 8
	funDecSym      reduce using rule 8
	"("            reduce using rule 8
	")"            reduce using rule 8
	"<"            reduce using rule 8
	">"            reduce using rule 8
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 8)

	"!"            reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	case           reduce using rule 8
	of             reduce using rule 8
	","            reduce using rule 8
	end            reduce using rule 8
	"=="           reduce using rule 8
	"!="           reduce using rule 8
	"<="           reduce using rule 8
	">="           reduce using rule 8
	"&&"           reduce using rule 8
	"||"           reduce using rule 8
	%eof           reduce using rule 8


State 55

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr "%" Expr .                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 5
	bool           reduce using rule 5
	identifier     reduce using rule 5
	varDecSym      reduce using rule 5
	funDecSym      reduce using rule 5
	"("            reduce using rule 5
	")"            reduce using rule 5
	"<"            shift, and enter state 14
			(reduce using rule 5)

	">"            shift, and enter state 15
			(reduce using rule 5)

	"+"            shift, and enter state 16
			(reduce using rule 5)

	"-"            shift, and enter state 17
			(reduce using rule 5)

	"*"            shift, and enter state 18
			(reduce using rule 5)

	"/"            shift, and enter state 19
			(reduce using rule 5)

	"%"            shift, and enter state 20
			(reduce using rule 5)

	"!"            reduce using rule 5
	let            reduce using rule 5
	in             reduce using rule 5
	case           reduce using rule 5
	of             reduce using rule 5
	","            reduce using rule 5
	end            reduce using rule 5
	"=="           shift, and enter state 21
			(reduce using rule 5)

	"!="           shift, and enter state 22
			(reduce using rule 5)

	"<="           shift, and enter state 23
			(reduce using rule 5)

	">="           shift, and enter state 24
			(reduce using rule 5)

	"&&"           shift, and enter state 25
			(reduce using rule 5)

	"||"           shift, and enter state 26
			(reduce using rule 5)

	%eof           reduce using rule 5


State 56

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr "/" Expr .                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 4
	bool           reduce using rule 4
	identifier     reduce using rule 4
	varDecSym      reduce using rule 4
	funDecSym      reduce using rule 4
	"("            reduce using rule 4
	")"            reduce using rule 4
	"<"            reduce using rule 4
	">"            reduce using rule 4
	"+"            reduce using rule 4
	"-"            reduce using rule 4
	"*"            reduce using rule 4
	"/"            reduce using rule 4
	"%"            shift, and enter state 20
			(reduce using rule 4)

	"!"            reduce using rule 4
	let            reduce using rule 4
	in             reduce using rule 4
	case           reduce using rule 4
	of             reduce using rule 4
	","            reduce using rule 4
	end            reduce using rule 4
	"=="           reduce using rule 4
	"!="           reduce using rule 4
	"<="           reduce using rule 4
	">="           reduce using rule 4
	"&&"           reduce using rule 4
	"||"           reduce using rule 4
	%eof           reduce using rule 4


State 57

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr "*" Expr .                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 3
	bool           reduce using rule 3
	identifier     reduce using rule 3
	varDecSym      reduce using rule 3
	funDecSym      reduce using rule 3
	"("            reduce using rule 3
	")"            reduce using rule 3
	"<"            reduce using rule 3
	">"            reduce using rule 3
	"+"            reduce using rule 3
	"-"            reduce using rule 3
	"*"            reduce using rule 3
	"/"            reduce using rule 3
	"%"            shift, and enter state 20
			(reduce using rule 3)

	"!"            reduce using rule 3
	let            reduce using rule 3
	in             reduce using rule 3
	case           reduce using rule 3
	of             reduce using rule 3
	","            reduce using rule 3
	end            reduce using rule 3
	"=="           reduce using rule 3
	"!="           reduce using rule 3
	"<="           reduce using rule 3
	">="           reduce using rule 3
	"&&"           reduce using rule 3
	"||"           reduce using rule 3
	%eof           reduce using rule 3


State 58

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr "-" Expr .                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 2
	bool           reduce using rule 2
	identifier     reduce using rule 2
	varDecSym      reduce using rule 2
	funDecSym      reduce using rule 2
	"("            reduce using rule 2
	")"            reduce using rule 2
	"<"            reduce using rule 2
	">"            reduce using rule 2
	"+"            reduce using rule 2
	"-"            reduce using rule 2
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 2)

	"!"            reduce using rule 2
	let            reduce using rule 2
	in             reduce using rule 2
	case           reduce using rule 2
	of             reduce using rule 2
	","            reduce using rule 2
	end            reduce using rule 2
	"=="           reduce using rule 2
	"!="           reduce using rule 2
	"<="           reduce using rule 2
	">="           reduce using rule 2
	"&&"           reduce using rule 2
	"||"           reduce using rule 2
	%eof           reduce using rule 2


State 59

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr "+" Expr .                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 1
	bool           reduce using rule 1
	identifier     reduce using rule 1
	varDecSym      reduce using rule 1
	funDecSym      reduce using rule 1
	"("            reduce using rule 1
	")"            reduce using rule 1
	"<"            reduce using rule 1
	">"            reduce using rule 1
	"+"            reduce using rule 1
	"-"            reduce using rule 1
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 1)

	"!"            reduce using rule 1
	let            reduce using rule 1
	in             reduce using rule 1
	case           reduce using rule 1
	of             reduce using rule 1
	","            reduce using rule 1
	end            reduce using rule 1
	"=="           reduce using rule 1
	"!="           reduce using rule 1
	"<="           reduce using rule 1
	">="           reduce using rule 1
	"&&"           reduce using rule 1
	"||"           reduce using rule 1
	%eof           reduce using rule 1


State 60

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr ">" Expr .                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 7
	bool           reduce using rule 7
	identifier     reduce using rule 7
	varDecSym      reduce using rule 7
	funDecSym      reduce using rule 7
	"("            reduce using rule 7
	")"            reduce using rule 7
	"<"            reduce using rule 7
	">"            reduce using rule 7
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 7)

	"!"            reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	case           reduce using rule 7
	of             reduce using rule 7
	","            reduce using rule 7
	end            reduce using rule 7
	"=="           reduce using rule 7
	"!="           reduce using rule 7
	"<="           reduce using rule 7
	">="           reduce using rule 7
	"&&"           reduce using rule 7
	"||"           reduce using rule 7
	%eof           reduce using rule 7


State 61

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr "<" Expr .                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)

	int            reduce using rule 6
	bool           reduce using rule 6
	identifier     reduce using rule 6
	varDecSym      reduce using rule 6
	funDecSym      reduce using rule 6
	"("            reduce using rule 6
	")"            reduce using rule 6
	"<"            reduce using rule 6
	">"            reduce using rule 6
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 6)

	"!"            reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	case           reduce using rule 6
	of             reduce using rule 6
	","            reduce using rule 6
	end            reduce using rule 6
	"=="           reduce using rule 6
	"!="           reduce using rule 6
	"<="           reduce using rule 6
	">="           reduce using rule 6
	"&&"           reduce using rule 6
	"||"           reduce using rule 6
	%eof           reduce using rule 6


State 62

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	caseOf -> of Expr . in Expr end                     (rule 31)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	in             shift, and enter state 75
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 63

	Expr -> case Expr caseOfs in . Expr end end         (rule 23)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 74
	varDec         goto state 3

State 64

	caseOfs -> caseOf caseOfs .                         (rule 33)

	in             reduce using rule 33


State 65

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Expr -> let MultiExprs in Expr . end                (rule 24)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	end            shift, and enter state 73
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 66

	Exprs -> Expr "," Exprs .                           (rule 26)

	")"            reduce using rule 26


State 67

	identifiers -> identifier "," . identifiers         (rule 30)

	identifier     shift, and enter state 40

	identifiers    goto state 72

State 68

	Expr -> funDecSym identifier identifiers in . Expr end    (rule 19)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 71
	varDec         goto state 3

State 69

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	varDec -> varDecSym identifier in Expr .            (rule 34)

	int            reduce using rule 34
	bool           reduce using rule 34
	identifier     reduce using rule 34
	varDecSym      reduce using rule 34
	funDecSym      reduce using rule 34
	"("            reduce using rule 34
	")"            reduce using rule 34
	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
			(reduce using rule 34)

	"!"            reduce using rule 34
	let            reduce using rule 34
	in             reduce using rule 34
	case           reduce using rule 34
	of             reduce using rule 34
	","            reduce using rule 34
	end            reduce using rule 34
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26
	%eof           reduce using rule 34


State 70

	Expr -> identifier "(" Exprs ")" .                  (rule 18)

	int            reduce using rule 18
	bool           reduce using rule 18
	identifier     reduce using rule 18
	varDecSym      reduce using rule 18
	funDecSym      reduce using rule 18
	"("            reduce using rule 18
	")"            reduce using rule 18
	"<"            reduce using rule 18
	">"            reduce using rule 18
	"+"            reduce using rule 18
	"-"            reduce using rule 18
	"*"            reduce using rule 18
	"/"            reduce using rule 18
	"%"            reduce using rule 18
	"!"            reduce using rule 18
	let            reduce using rule 18
	in             reduce using rule 18
	case           reduce using rule 18
	of             reduce using rule 18
	","            reduce using rule 18
	end            reduce using rule 18
	"=="           reduce using rule 18
	"!="           reduce using rule 18
	"<="           reduce using rule 18
	">="           reduce using rule 18
	"&&"           reduce using rule 18
	"||"           reduce using rule 18
	%eof           reduce using rule 18


State 71

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Expr -> funDecSym identifier identifiers in Expr . end    (rule 19)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	end            shift, and enter state 78
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 72

	identifiers -> identifier "," identifiers .         (rule 30)

	in             reduce using rule 30


State 73

	Expr -> let MultiExprs in Expr end .                (rule 24)

	int            reduce using rule 24
	bool           reduce using rule 24
	identifier     reduce using rule 24
	varDecSym      reduce using rule 24
	funDecSym      reduce using rule 24
	"("            reduce using rule 24
	")"            reduce using rule 24
	"<"            reduce using rule 24
	">"            reduce using rule 24
	"+"            reduce using rule 24
	"-"            reduce using rule 24
	"*"            reduce using rule 24
	"/"            reduce using rule 24
	"%"            reduce using rule 24
	"!"            reduce using rule 24
	let            reduce using rule 24
	in             reduce using rule 24
	case           reduce using rule 24
	of             reduce using rule 24
	","            reduce using rule 24
	end            reduce using rule 24
	"=="           reduce using rule 24
	"!="           reduce using rule 24
	"<="           reduce using rule 24
	">="           reduce using rule 24
	"&&"           reduce using rule 24
	"||"           reduce using rule 24
	%eof           reduce using rule 24


State 74

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	Expr -> case Expr caseOfs in Expr . end end         (rule 23)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	end            shift, and enter state 77
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 75

	caseOf -> of Expr in . Expr end                     (rule 31)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDecSym      shift, and enter state 7
	funDecSym      shift, and enter state 8
	"("            shift, and enter state 9
	"!"            shift, and enter state 10
	let            shift, and enter state 11
	case           shift, and enter state 12

	Expr           goto state 76
	varDec         goto state 3

State 76

	Expr -> Expr . "+" Expr                             (rule 1)
	Expr -> Expr . "-" Expr                             (rule 2)
	Expr -> Expr . "*" Expr                             (rule 3)
	Expr -> Expr . "/" Expr                             (rule 4)
	Expr -> Expr . "%" Expr                             (rule 5)
	Expr -> Expr . "<" Expr                             (rule 6)
	Expr -> Expr . ">" Expr                             (rule 7)
	Expr -> Expr . "==" Expr                            (rule 8)
	Expr -> Expr . "!=" Expr                            (rule 9)
	Expr -> Expr . "<=" Expr                            (rule 10)
	Expr -> Expr . ">=" Expr                            (rule 11)
	Expr -> Expr . "&&" Expr                            (rule 12)
	Expr -> Expr . "||" Expr                            (rule 13)
	caseOf -> of Expr in Expr . end                     (rule 31)

	"<"            shift, and enter state 14
	">"            shift, and enter state 15
	"+"            shift, and enter state 16
	"-"            shift, and enter state 17
	"*"            shift, and enter state 18
	"/"            shift, and enter state 19
	"%"            shift, and enter state 20
	end            shift, and enter state 80
	"=="           shift, and enter state 21
	"!="           shift, and enter state 22
	"<="           shift, and enter state 23
	">="           shift, and enter state 24
	"&&"           shift, and enter state 25
	"||"           shift, and enter state 26


State 77

	Expr -> case Expr caseOfs in Expr end . end         (rule 23)

	end            shift, and enter state 79


State 78

	Expr -> funDecSym identifier identifiers in Expr end .    (rule 19)

	int            reduce using rule 19
	bool           reduce using rule 19
	identifier     reduce using rule 19
	varDecSym      reduce using rule 19
	funDecSym      reduce using rule 19
	"("            reduce using rule 19
	")"            reduce using rule 19
	"<"            reduce using rule 19
	">"            reduce using rule 19
	"+"            reduce using rule 19
	"-"            reduce using rule 19
	"*"            reduce using rule 19
	"/"            reduce using rule 19
	"%"            reduce using rule 19
	"!"            reduce using rule 19
	let            reduce using rule 19
	in             reduce using rule 19
	case           reduce using rule 19
	of             reduce using rule 19
	","            reduce using rule 19
	end            reduce using rule 19
	"=="           reduce using rule 19
	"!="           reduce using rule 19
	"<="           reduce using rule 19
	">="           reduce using rule 19
	"&&"           reduce using rule 19
	"||"           reduce using rule 19
	%eof           reduce using rule 19


State 79

	Expr -> case Expr caseOfs in Expr end end .         (rule 23)

	int            reduce using rule 23
	bool           reduce using rule 23
	identifier     reduce using rule 23
	varDecSym      reduce using rule 23
	funDecSym      reduce using rule 23
	"("            reduce using rule 23
	")"            reduce using rule 23
	"<"            reduce using rule 23
	">"            reduce using rule 23
	"+"            reduce using rule 23
	"-"            reduce using rule 23
	"*"            reduce using rule 23
	"/"            reduce using rule 23
	"%"            reduce using rule 23
	"!"            reduce using rule 23
	let            reduce using rule 23
	in             reduce using rule 23
	case           reduce using rule 23
	of             reduce using rule 23
	","            reduce using rule 23
	end            reduce using rule 23
	"=="           reduce using rule 23
	"!="           reduce using rule 23
	"<="           reduce using rule 23
	">="           reduce using rule 23
	"&&"           reduce using rule 23
	"||"           reduce using rule 23
	%eof           reduce using rule 23


State 80

	caseOf -> of Expr in Expr end .                     (rule 31)

	in             reduce using rule 31
	of             reduce using rule 31


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 35
Number of terminals: 27
Number of non-terminals: 8
Number of states: 81
