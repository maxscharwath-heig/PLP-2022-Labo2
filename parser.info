-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 3 contains 21 shift/reduce conflicts.
state 8 contains 8 shift/reduce conflicts.
state 14 contains 6 shift/reduce conflicts.
state 31 contains 13 shift/reduce conflicts.
state 32 contains 13 shift/reduce conflicts.
state 33 contains 13 shift/reduce conflicts.
state 34 contains 13 shift/reduce conflicts.
state 35 contains 13 shift/reduce conflicts.
state 36 contains 13 shift/reduce conflicts.
state 37 contains 6 shift/reduce conflicts.
state 38 contains 6 shift/reduce conflicts.
state 39 contains 6 shift/reduce conflicts.
state 40 contains 6 shift/reduce conflicts.
state 41 contains 6 shift/reduce conflicts.
state 42 contains 6 shift/reduce conflicts.
state 43 contains 6 shift/reduce conflicts.
state 47 contains 6 shift/reduce conflicts.
state 50 contains 6 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Exprs                             (0)
	Exprs ->                                           (1)
	Exprs -> Expr Exprs                                (2)
	Expr -> let varDec '=' Expr in Expr                (3)
	Expr -> Expr '+' Expr                              (4)
	Expr -> Expr '-' Expr                              (5)
	Expr -> Expr '*' Expr                              (6)
	Expr -> Expr '/' Expr                              (7)
	Expr -> Expr '%' Expr                              (8)
	Expr -> Expr '<' Expr                              (9)
	Expr -> Expr '>' Expr                              (10)
	Expr -> Expr "==" Expr                             (11)
	Expr -> Expr "!=" Expr                             (12)
	Expr -> Expr "<=" Expr                             (13)
	Expr -> Expr ">=" Expr                             (14)
	Expr -> Expr "&&" Expr                             (15)
	Expr -> Expr "||" Expr                             (16)
	Expr -> '!' Expr                                   (17)
	Expr -> identifier                                 (18)
	Expr -> varDec                                     (19)
	Expr -> funDec Exprs                               (20)
	Expr -> '(' Expr ')'                               (21)
	Expr -> let Expr in Expr                           (22)
	Expr -> int                                        (23)
	Expr -> bool                                       (24)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TInt $$ }
	bool           { TBool $$ }
	identifier     { TIdentifier $$ }
	varDec         { TVarDec }
	funDec         { TFunDec }
	'('            { TSym '(' }
	')'            { TSym ')' }
	'='            { TSym '=' }
	'<'            { TSym '<' }
	'>'            { TSym '>' }
	'+'            { TSym '+' }
	'-'            { TSym '-' }
	'*'            { TSym '*' }
	'/'            { TSym '/' }
	'%'            { TSym '%' }
	'!'            { TSym '!' }
	let            { TLet }
	in             { TIn }
	"=="           { TDSym "==" }
	"!="           { TDSym "!=" }
	"<="           { TDSym "<=" }
	">="           { TDSym ">=" }
	"&&"           { TDSym "&&" }
	"||"           { TDSym "||" }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Exprs           rules 1, 2
	Expr            rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Exprs                            (rule 0)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11
	%eof           reduce using rule 1

	Exprs          goto state 2
	Expr           goto state 3

State 1

	Exprs -> .                                          (rule 1)



State 2

	%start_parser -> Exprs .                            (rule 0)

	%eof           accept


State 3

	Exprs -> Expr . Exprs                               (rule 2)
	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            shift, and enter state 4
			(reduce using rule 1)

	bool           shift, and enter state 5
			(reduce using rule 1)

	identifier     shift, and enter state 6
			(reduce using rule 1)

	varDec         shift, and enter state 7
			(reduce using rule 1)

	funDec         shift, and enter state 8
			(reduce using rule 1)

	'('            shift, and enter state 9
			(reduce using rule 1)

	')'            reduce using rule 1
	'<'            shift, and enter state 18
			(reduce using rule 1)

	'>'            shift, and enter state 19
			(reduce using rule 1)

	'+'            shift, and enter state 20
			(reduce using rule 1)

	'-'            shift, and enter state 21
			(reduce using rule 1)

	'*'            shift, and enter state 22
			(reduce using rule 1)

	'/'            shift, and enter state 23
			(reduce using rule 1)

	'%'            shift, and enter state 24
			(reduce using rule 1)

	'!'            shift, and enter state 10
			(reduce using rule 1)

	let            shift, and enter state 11
			(reduce using rule 1)

	in             reduce using rule 1
	"=="           shift, and enter state 25
			(reduce using rule 1)

	"!="           shift, and enter state 26
			(reduce using rule 1)

	"<="           shift, and enter state 27
			(reduce using rule 1)

	">="           shift, and enter state 28
			(reduce using rule 1)

	"&&"           shift, and enter state 29
			(reduce using rule 1)

	"||"           shift, and enter state 30
			(reduce using rule 1)

	%eof           reduce using rule 1

	Exprs          goto state 17
	Expr           goto state 3

State 4

	Expr -> int .                                       (rule 23)

	int            reduce using rule 23
	bool           reduce using rule 23
	identifier     reduce using rule 23
	varDec         reduce using rule 23
	funDec         reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'%'            reduce using rule 23
	'!'            reduce using rule 23
	let            reduce using rule 23
	in             reduce using rule 23
	"=="           reduce using rule 23
	"!="           reduce using rule 23
	"<="           reduce using rule 23
	">="           reduce using rule 23
	"&&"           reduce using rule 23
	"||"           reduce using rule 23
	%eof           reduce using rule 23


State 5

	Expr -> bool .                                      (rule 24)

	int            reduce using rule 24
	bool           reduce using rule 24
	identifier     reduce using rule 24
	varDec         reduce using rule 24
	funDec         reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'%'            reduce using rule 24
	'!'            reduce using rule 24
	let            reduce using rule 24
	in             reduce using rule 24
	"=="           reduce using rule 24
	"!="           reduce using rule 24
	"<="           reduce using rule 24
	">="           reduce using rule 24
	"&&"           reduce using rule 24
	"||"           reduce using rule 24
	%eof           reduce using rule 24


State 6

	Expr -> identifier .                                (rule 18)

	int            reduce using rule 18
	bool           reduce using rule 18
	identifier     reduce using rule 18
	varDec         reduce using rule 18
	funDec         reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'%'            reduce using rule 18
	'!'            reduce using rule 18
	let            reduce using rule 18
	in             reduce using rule 18
	"=="           reduce using rule 18
	"!="           reduce using rule 18
	"<="           reduce using rule 18
	">="           reduce using rule 18
	"&&"           reduce using rule 18
	"||"           reduce using rule 18
	%eof           reduce using rule 18


State 7

	Expr -> varDec .                                    (rule 19)

	int            reduce using rule 19
	bool           reduce using rule 19
	identifier     reduce using rule 19
	varDec         reduce using rule 19
	funDec         reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'%'            reduce using rule 19
	'!'            reduce using rule 19
	let            reduce using rule 19
	in             reduce using rule 19
	"=="           reduce using rule 19
	"!="           reduce using rule 19
	"<="           reduce using rule 19
	">="           reduce using rule 19
	"&&"           reduce using rule 19
	"||"           reduce using rule 19
	%eof           reduce using rule 19


State 8

	Expr -> funDec . Exprs                              (rule 20)

	int            shift, and enter state 4
			(reduce using rule 1)

	bool           shift, and enter state 5
			(reduce using rule 1)

	identifier     shift, and enter state 6
			(reduce using rule 1)

	varDec         shift, and enter state 7
			(reduce using rule 1)

	funDec         shift, and enter state 8
			(reduce using rule 1)

	'('            shift, and enter state 9
			(reduce using rule 1)

	')'            reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	'%'            reduce using rule 1
	'!'            shift, and enter state 10
			(reduce using rule 1)

	let            shift, and enter state 11
			(reduce using rule 1)

	in             reduce using rule 1
	"=="           reduce using rule 1
	"!="           reduce using rule 1
	"<="           reduce using rule 1
	">="           reduce using rule 1
	"&&"           reduce using rule 1
	"||"           reduce using rule 1
	%eof           reduce using rule 1

	Exprs          goto state 16
	Expr           goto state 3

State 9

	Expr -> '(' . Expr ')'                              (rule 21)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 15

State 10

	Expr -> '!' . Expr                                  (rule 17)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 14

State 11

	Expr -> let . varDec '=' Expr in Expr               (rule 3)
	Expr -> let . Expr in Expr                          (rule 22)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 13
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 12

State 12

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)
	Expr -> let Expr . in Expr                          (rule 22)

	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'+'            shift, and enter state 20
	'-'            shift, and enter state 21
	'*'            shift, and enter state 22
	'/'            shift, and enter state 23
	'%'            shift, and enter state 24
	in             shift, and enter state 46
	"=="           shift, and enter state 25
	"!="           shift, and enter state 26
	"<="           shift, and enter state 27
	">="           shift, and enter state 28
	"&&"           shift, and enter state 29
	"||"           shift, and enter state 30


State 13

	Expr -> let varDec . '=' Expr in Expr               (rule 3)
	Expr -> varDec .                                    (rule 19)

	'='            shift, and enter state 45
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'%'            reduce using rule 19
	in             reduce using rule 19
	"=="           reduce using rule 19
	"!="           reduce using rule 19
	"<="           reduce using rule 19
	">="           reduce using rule 19
	"&&"           reduce using rule 19
	"||"           reduce using rule 19


State 14

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)
	Expr -> '!' Expr .                                  (rule 17)

	int            reduce using rule 17
	bool           reduce using rule 17
	identifier     reduce using rule 17
	varDec         reduce using rule 17
	funDec         reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'%'            reduce using rule 17
	'!'            reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	"=="           shift, and enter state 25
			(reduce using rule 17)

	"!="           shift, and enter state 26
			(reduce using rule 17)

	"<="           shift, and enter state 27
			(reduce using rule 17)

	">="           shift, and enter state 28
			(reduce using rule 17)

	"&&"           shift, and enter state 29
			(reduce using rule 17)

	"||"           shift, and enter state 30
			(reduce using rule 17)

	%eof           reduce using rule 17


State 15

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)
	Expr -> '(' Expr . ')'                              (rule 21)

	')'            shift, and enter state 44
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'+'            shift, and enter state 20
	'-'            shift, and enter state 21
	'*'            shift, and enter state 22
	'/'            shift, and enter state 23
	'%'            shift, and enter state 24
	"=="           shift, and enter state 25
	"!="           shift, and enter state 26
	"<="           shift, and enter state 27
	">="           shift, and enter state 28
	"&&"           shift, and enter state 29
	"||"           shift, and enter state 30


State 16

	Expr -> funDec Exprs .                              (rule 20)

	int            reduce using rule 20
	bool           reduce using rule 20
	identifier     reduce using rule 20
	varDec         reduce using rule 20
	funDec         reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'%'            reduce using rule 20
	'!'            reduce using rule 20
	let            reduce using rule 20
	in             reduce using rule 20
	"=="           reduce using rule 20
	"!="           reduce using rule 20
	"<="           reduce using rule 20
	">="           reduce using rule 20
	"&&"           reduce using rule 20
	"||"           reduce using rule 20
	%eof           reduce using rule 20


State 17

	Exprs -> Expr Exprs .                               (rule 2)

	int            reduce using rule 2
	bool           reduce using rule 2
	identifier     reduce using rule 2
	varDec         reduce using rule 2
	funDec         reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	'/'            reduce using rule 2
	'%'            reduce using rule 2
	'!'            reduce using rule 2
	let            reduce using rule 2
	in             reduce using rule 2
	"=="           reduce using rule 2
	"!="           reduce using rule 2
	"<="           reduce using rule 2
	">="           reduce using rule 2
	"&&"           reduce using rule 2
	"||"           reduce using rule 2
	%eof           reduce using rule 2


State 18

	Expr -> Expr '<' . Expr                             (rule 9)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 43

State 19

	Expr -> Expr '>' . Expr                             (rule 10)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 42

State 20

	Expr -> Expr '+' . Expr                             (rule 4)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 41

State 21

	Expr -> Expr '-' . Expr                             (rule 5)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 40

State 22

	Expr -> Expr '*' . Expr                             (rule 6)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 39

State 23

	Expr -> Expr '/' . Expr                             (rule 7)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 38

State 24

	Expr -> Expr '%' . Expr                             (rule 8)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 37

State 25

	Expr -> Expr "==" . Expr                            (rule 11)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 36

State 26

	Expr -> Expr "!=" . Expr                            (rule 12)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 35

State 27

	Expr -> Expr "<=" . Expr                            (rule 13)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 34

State 28

	Expr -> Expr ">=" . Expr                            (rule 14)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 33

State 29

	Expr -> Expr "&&" . Expr                            (rule 15)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 32

State 30

	Expr -> Expr "||" . Expr                            (rule 16)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 31

State 31

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)
	Expr -> Expr "||" Expr .                            (rule 16)

	int            reduce using rule 16
	bool           reduce using rule 16
	identifier     reduce using rule 16
	varDec         reduce using rule 16
	funDec         reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'<'            shift, and enter state 18
			(reduce using rule 16)

	'>'            shift, and enter state 19
			(reduce using rule 16)

	'+'            shift, and enter state 20
			(reduce using rule 16)

	'-'            shift, and enter state 21
			(reduce using rule 16)

	'*'            shift, and enter state 22
			(reduce using rule 16)

	'/'            shift, and enter state 23
			(reduce using rule 16)

	'%'            shift, and enter state 24
			(reduce using rule 16)

	'!'            reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	"=="           shift, and enter state 25
			(reduce using rule 16)

	"!="           shift, and enter state 26
			(reduce using rule 16)

	"<="           shift, and enter state 27
			(reduce using rule 16)

	">="           shift, and enter state 28
			(reduce using rule 16)

	"&&"           shift, and enter state 29
			(reduce using rule 16)

	"||"           shift, and enter state 30
			(reduce using rule 16)

	%eof           reduce using rule 16


State 32

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr "&&" Expr .                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 15
	bool           reduce using rule 15
	identifier     reduce using rule 15
	varDec         reduce using rule 15
	funDec         reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'<'            shift, and enter state 18
			(reduce using rule 15)

	'>'            shift, and enter state 19
			(reduce using rule 15)

	'+'            shift, and enter state 20
			(reduce using rule 15)

	'-'            shift, and enter state 21
			(reduce using rule 15)

	'*'            shift, and enter state 22
			(reduce using rule 15)

	'/'            shift, and enter state 23
			(reduce using rule 15)

	'%'            shift, and enter state 24
			(reduce using rule 15)

	'!'            reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	"=="           shift, and enter state 25
			(reduce using rule 15)

	"!="           shift, and enter state 26
			(reduce using rule 15)

	"<="           shift, and enter state 27
			(reduce using rule 15)

	">="           shift, and enter state 28
			(reduce using rule 15)

	"&&"           shift, and enter state 29
			(reduce using rule 15)

	"||"           shift, and enter state 30
			(reduce using rule 15)

	%eof           reduce using rule 15


State 33

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr ">=" Expr .                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 14
	bool           reduce using rule 14
	identifier     reduce using rule 14
	varDec         reduce using rule 14
	funDec         reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'<'            shift, and enter state 18
			(reduce using rule 14)

	'>'            shift, and enter state 19
			(reduce using rule 14)

	'+'            shift, and enter state 20
			(reduce using rule 14)

	'-'            shift, and enter state 21
			(reduce using rule 14)

	'*'            shift, and enter state 22
			(reduce using rule 14)

	'/'            shift, and enter state 23
			(reduce using rule 14)

	'%'            shift, and enter state 24
			(reduce using rule 14)

	'!'            reduce using rule 14
	let            reduce using rule 14
	in             reduce using rule 14
	"=="           shift, and enter state 25
			(reduce using rule 14)

	"!="           shift, and enter state 26
			(reduce using rule 14)

	"<="           shift, and enter state 27
			(reduce using rule 14)

	">="           shift, and enter state 28
			(reduce using rule 14)

	"&&"           shift, and enter state 29
			(reduce using rule 14)

	"||"           shift, and enter state 30
			(reduce using rule 14)

	%eof           reduce using rule 14


State 34

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr "<=" Expr .                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 13
	bool           reduce using rule 13
	identifier     reduce using rule 13
	varDec         reduce using rule 13
	funDec         reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'<'            shift, and enter state 18
			(reduce using rule 13)

	'>'            shift, and enter state 19
			(reduce using rule 13)

	'+'            shift, and enter state 20
			(reduce using rule 13)

	'-'            shift, and enter state 21
			(reduce using rule 13)

	'*'            shift, and enter state 22
			(reduce using rule 13)

	'/'            shift, and enter state 23
			(reduce using rule 13)

	'%'            shift, and enter state 24
			(reduce using rule 13)

	'!'            reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	"=="           shift, and enter state 25
			(reduce using rule 13)

	"!="           shift, and enter state 26
			(reduce using rule 13)

	"<="           shift, and enter state 27
			(reduce using rule 13)

	">="           shift, and enter state 28
			(reduce using rule 13)

	"&&"           shift, and enter state 29
			(reduce using rule 13)

	"||"           shift, and enter state 30
			(reduce using rule 13)

	%eof           reduce using rule 13


State 35

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr "!=" Expr .                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 12
	bool           reduce using rule 12
	identifier     reduce using rule 12
	varDec         reduce using rule 12
	funDec         reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'<'            shift, and enter state 18
			(reduce using rule 12)

	'>'            shift, and enter state 19
			(reduce using rule 12)

	'+'            shift, and enter state 20
			(reduce using rule 12)

	'-'            shift, and enter state 21
			(reduce using rule 12)

	'*'            shift, and enter state 22
			(reduce using rule 12)

	'/'            shift, and enter state 23
			(reduce using rule 12)

	'%'            shift, and enter state 24
			(reduce using rule 12)

	'!'            reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	"=="           shift, and enter state 25
			(reduce using rule 12)

	"!="           shift, and enter state 26
			(reduce using rule 12)

	"<="           shift, and enter state 27
			(reduce using rule 12)

	">="           shift, and enter state 28
			(reduce using rule 12)

	"&&"           shift, and enter state 29
			(reduce using rule 12)

	"||"           shift, and enter state 30
			(reduce using rule 12)

	%eof           reduce using rule 12


State 36

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr "==" Expr .                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 11
	bool           reduce using rule 11
	identifier     reduce using rule 11
	varDec         reduce using rule 11
	funDec         reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'<'            shift, and enter state 18
			(reduce using rule 11)

	'>'            shift, and enter state 19
			(reduce using rule 11)

	'+'            shift, and enter state 20
			(reduce using rule 11)

	'-'            shift, and enter state 21
			(reduce using rule 11)

	'*'            shift, and enter state 22
			(reduce using rule 11)

	'/'            shift, and enter state 23
			(reduce using rule 11)

	'%'            shift, and enter state 24
			(reduce using rule 11)

	'!'            reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	"=="           shift, and enter state 25
			(reduce using rule 11)

	"!="           shift, and enter state 26
			(reduce using rule 11)

	"<="           shift, and enter state 27
			(reduce using rule 11)

	">="           shift, and enter state 28
			(reduce using rule 11)

	"&&"           shift, and enter state 29
			(reduce using rule 11)

	"||"           shift, and enter state 30
			(reduce using rule 11)

	%eof           reduce using rule 11


State 37

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr '%' Expr .                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 8
	bool           reduce using rule 8
	identifier     reduce using rule 8
	varDec         reduce using rule 8
	funDec         reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'%'            reduce using rule 8
	'!'            reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	"=="           shift, and enter state 25
			(reduce using rule 8)

	"!="           shift, and enter state 26
			(reduce using rule 8)

	"<="           shift, and enter state 27
			(reduce using rule 8)

	">="           shift, and enter state 28
			(reduce using rule 8)

	"&&"           shift, and enter state 29
			(reduce using rule 8)

	"||"           shift, and enter state 30
			(reduce using rule 8)

	%eof           reduce using rule 8


State 38

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr '/' Expr .                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 7
	bool           reduce using rule 7
	identifier     reduce using rule 7
	varDec         reduce using rule 7
	funDec         reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'%'            reduce using rule 7
	'!'            reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	"=="           shift, and enter state 25
			(reduce using rule 7)

	"!="           shift, and enter state 26
			(reduce using rule 7)

	"<="           shift, and enter state 27
			(reduce using rule 7)

	">="           shift, and enter state 28
			(reduce using rule 7)

	"&&"           shift, and enter state 29
			(reduce using rule 7)

	"||"           shift, and enter state 30
			(reduce using rule 7)

	%eof           reduce using rule 7


State 39

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr '*' Expr .                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 6
	bool           reduce using rule 6
	identifier     reduce using rule 6
	varDec         reduce using rule 6
	funDec         reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'%'            reduce using rule 6
	'!'            reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	"=="           shift, and enter state 25
			(reduce using rule 6)

	"!="           shift, and enter state 26
			(reduce using rule 6)

	"<="           shift, and enter state 27
			(reduce using rule 6)

	">="           shift, and enter state 28
			(reduce using rule 6)

	"&&"           shift, and enter state 29
			(reduce using rule 6)

	"||"           shift, and enter state 30
			(reduce using rule 6)

	%eof           reduce using rule 6


State 40

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr '-' Expr .                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 5
	bool           reduce using rule 5
	identifier     reduce using rule 5
	varDec         reduce using rule 5
	funDec         reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	'%'            reduce using rule 5
	'!'            reduce using rule 5
	let            reduce using rule 5
	in             reduce using rule 5
	"=="           shift, and enter state 25
			(reduce using rule 5)

	"!="           shift, and enter state 26
			(reduce using rule 5)

	"<="           shift, and enter state 27
			(reduce using rule 5)

	">="           shift, and enter state 28
			(reduce using rule 5)

	"&&"           shift, and enter state 29
			(reduce using rule 5)

	"||"           shift, and enter state 30
			(reduce using rule 5)

	%eof           reduce using rule 5


State 41

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr '+' Expr .                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 4
	bool           reduce using rule 4
	identifier     reduce using rule 4
	varDec         reduce using rule 4
	funDec         reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'%'            reduce using rule 4
	'!'            reduce using rule 4
	let            reduce using rule 4
	in             reduce using rule 4
	"=="           shift, and enter state 25
			(reduce using rule 4)

	"!="           shift, and enter state 26
			(reduce using rule 4)

	"<="           shift, and enter state 27
			(reduce using rule 4)

	">="           shift, and enter state 28
			(reduce using rule 4)

	"&&"           shift, and enter state 29
			(reduce using rule 4)

	"||"           shift, and enter state 30
			(reduce using rule 4)

	%eof           reduce using rule 4


State 42

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr '>' Expr .                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 10
	bool           reduce using rule 10
	identifier     reduce using rule 10
	varDec         reduce using rule 10
	funDec         reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'%'            reduce using rule 10
	'!'            reduce using rule 10
	let            reduce using rule 10
	in             reduce using rule 10
	"=="           shift, and enter state 25
			(reduce using rule 10)

	"!="           shift, and enter state 26
			(reduce using rule 10)

	"<="           shift, and enter state 27
			(reduce using rule 10)

	">="           shift, and enter state 28
			(reduce using rule 10)

	"&&"           shift, and enter state 29
			(reduce using rule 10)

	"||"           shift, and enter state 30
			(reduce using rule 10)

	%eof           reduce using rule 10


State 43

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr '<' Expr .                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 9
	bool           reduce using rule 9
	identifier     reduce using rule 9
	varDec         reduce using rule 9
	funDec         reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'%'            reduce using rule 9
	'!'            reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	"=="           shift, and enter state 25
			(reduce using rule 9)

	"!="           shift, and enter state 26
			(reduce using rule 9)

	"<="           shift, and enter state 27
			(reduce using rule 9)

	">="           shift, and enter state 28
			(reduce using rule 9)

	"&&"           shift, and enter state 29
			(reduce using rule 9)

	"||"           shift, and enter state 30
			(reduce using rule 9)

	%eof           reduce using rule 9


State 44

	Expr -> '(' Expr ')' .                              (rule 21)

	int            reduce using rule 21
	bool           reduce using rule 21
	identifier     reduce using rule 21
	varDec         reduce using rule 21
	funDec         reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'%'            reduce using rule 21
	'!'            reduce using rule 21
	let            reduce using rule 21
	in             reduce using rule 21
	"=="           reduce using rule 21
	"!="           reduce using rule 21
	"<="           reduce using rule 21
	">="           reduce using rule 21
	"&&"           reduce using rule 21
	"||"           reduce using rule 21
	%eof           reduce using rule 21


State 45

	Expr -> let varDec '=' . Expr in Expr               (rule 3)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 48

State 46

	Expr -> let Expr in . Expr                          (rule 22)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 47

State 47

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)
	Expr -> let Expr in Expr .                          (rule 22)

	int            reduce using rule 22
	bool           reduce using rule 22
	identifier     reduce using rule 22
	varDec         reduce using rule 22
	funDec         reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'+'            shift, and enter state 20
	'-'            shift, and enter state 21
	'*'            shift, and enter state 22
	'/'            shift, and enter state 23
	'%'            shift, and enter state 24
	'!'            reduce using rule 22
	let            reduce using rule 22
	in             reduce using rule 22
	"=="           shift, and enter state 25
			(reduce using rule 22)

	"!="           shift, and enter state 26
			(reduce using rule 22)

	"<="           shift, and enter state 27
			(reduce using rule 22)

	">="           shift, and enter state 28
			(reduce using rule 22)

	"&&"           shift, and enter state 29
			(reduce using rule 22)

	"||"           shift, and enter state 30
			(reduce using rule 22)

	%eof           reduce using rule 22


State 48

	Expr -> let varDec '=' Expr . in Expr               (rule 3)
	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'+'            shift, and enter state 20
	'-'            shift, and enter state 21
	'*'            shift, and enter state 22
	'/'            shift, and enter state 23
	'%'            shift, and enter state 24
	in             shift, and enter state 49
	"=="           shift, and enter state 25
	"!="           shift, and enter state 26
	"<="           shift, and enter state 27
	">="           shift, and enter state 28
	"&&"           shift, and enter state 29
	"||"           shift, and enter state 30


State 49

	Expr -> let varDec '=' Expr in . Expr               (rule 3)

	int            shift, and enter state 4
	bool           shift, and enter state 5
	identifier     shift, and enter state 6
	varDec         shift, and enter state 7
	funDec         shift, and enter state 8
	'('            shift, and enter state 9
	'!'            shift, and enter state 10
	let            shift, and enter state 11

	Expr           goto state 50

State 50

	Expr -> let varDec '=' Expr in Expr .               (rule 3)
	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '*' Expr                             (rule 6)
	Expr -> Expr . '/' Expr                             (rule 7)
	Expr -> Expr . '%' Expr                             (rule 8)
	Expr -> Expr . '<' Expr                             (rule 9)
	Expr -> Expr . '>' Expr                             (rule 10)
	Expr -> Expr . "==" Expr                            (rule 11)
	Expr -> Expr . "!=" Expr                            (rule 12)
	Expr -> Expr . "<=" Expr                            (rule 13)
	Expr -> Expr . ">=" Expr                            (rule 14)
	Expr -> Expr . "&&" Expr                            (rule 15)
	Expr -> Expr . "||" Expr                            (rule 16)

	int            reduce using rule 3
	bool           reduce using rule 3
	identifier     reduce using rule 3
	varDec         reduce using rule 3
	funDec         reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'+'            shift, and enter state 20
	'-'            shift, and enter state 21
	'*'            shift, and enter state 22
	'/'            shift, and enter state 23
	'%'            shift, and enter state 24
	'!'            reduce using rule 3
	let            reduce using rule 3
	in             reduce using rule 3
	"=="           shift, and enter state 25
			(reduce using rule 3)

	"!="           shift, and enter state 26
			(reduce using rule 3)

	"<="           shift, and enter state 27
			(reduce using rule 3)

	">="           shift, and enter state 28
			(reduce using rule 3)

	"&&"           shift, and enter state 29
			(reduce using rule 3)

	"||"           shift, and enter state 30
			(reduce using rule 3)

	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 25
Number of terminals: 24
Number of non-terminals: 3
Number of states: 51
