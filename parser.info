-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 20 contains 5 shift/reduce conflicts.
state 21 contains 1 shift/reduce conflicts.
state 22 contains 1 shift/reduce conflicts.
state 23 contains 1 shift/reduce conflicts.
state 24 contains 1 shift/reduce conflicts.
state 25 contains 1 shift/reduce conflicts.

terminal '=' is unused
terminal '<' is unused
terminal '>' is unused
terminal '!' is unused
terminal case is unused
terminal of is unused
terminal ',' is unused
terminal end is unused
terminal "==" is unused
terminal "!=" is unused
terminal "<=" is unused
terminal ">=" is unused
terminal "&&" is unused
terminal "||" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Expr                              (0)
	Expr -> Expr '+' Expr                              (1)
	Expr -> Expr '-' Expr                              (2)
	Expr -> Expr '*' Expr                              (3)
	Expr -> Expr '/' Expr                              (4)
	Expr -> Expr '%' Expr                              (5)
	Expr -> identifier                                 (6)
	Expr -> varDec                                     (7)
	Expr -> funDec                                     (8)
	Expr -> '(' Expr ')'                               (9)
	Expr -> let Expr in Expr                           (10)
	Expr -> int                                        (11)
	Expr -> bool                                       (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TInt }
	bool           { TBool }
	identifier     { TIdentifier $$ }
	varDec         { TVarDec }
	funDec         { TFunDec }
	'('            { TSym '(' }
	')'            { TSym ')' }
	'='            { TSym '=' }
	'<'            { TSym '<' }
	'>'            { TSym '>' }
	'+'            { TSym '+' }
	'-'            { TSym '-' }
	'*'            { TSym '*' }
	'/'            { TSym '/' }
	'%'            { TSym '%' }
	'!'            { TSym '!' }
	let            { TLet }
	in             { TIn }
	case           { TCase }
	of             { TOf }
	','            { TSym ',' }
	end            { TEnd }
	"=="           { TDSym "==" }
	"!="           { TDSym "!=" }
	"<="           { TDSym "<=" }
	">="           { TDSym ">=" }
	"&&"           { TDSym "&&" }
	"||"           { TDSym "||" }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Expr                             (rule 0)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 10

State 1

	Expr -> . Expr '+' Expr                             (rule 1)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 2

State 2

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)

	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	'%'            shift, and enter state 15


State 3

	Expr -> int .                                       (rule 11)

	')'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'%'            reduce using rule 11
	in             reduce using rule 11
	%eof           reduce using rule 11


State 4

	Expr -> bool .                                      (rule 12)

	')'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'%'            reduce using rule 12
	in             reduce using rule 12
	%eof           reduce using rule 12


State 5

	Expr -> identifier .                                (rule 6)

	')'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'%'            reduce using rule 6
	in             reduce using rule 6
	%eof           reduce using rule 6


State 6

	Expr -> varDec .                                    (rule 7)

	')'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'%'            reduce using rule 7
	in             reduce using rule 7
	%eof           reduce using rule 7


State 7

	Expr -> funDec .                                    (rule 8)

	')'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'%'            reduce using rule 8
	in             reduce using rule 8
	%eof           reduce using rule 8


State 8

	Expr -> '(' . Expr ')'                              (rule 9)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 17

State 9

	Expr -> let . Expr in Expr                          (rule 10)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 16

State 10

	%start_parser -> Expr .                             (rule 0)
	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)

	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	'%'            shift, and enter state 15
	%eof           accept


State 11

	Expr -> Expr '+' . Expr                             (rule 1)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 24

State 12

	Expr -> Expr '-' . Expr                             (rule 2)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 23

State 13

	Expr -> Expr '*' . Expr                             (rule 3)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 22

State 14

	Expr -> Expr '/' . Expr                             (rule 4)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 21

State 15

	Expr -> Expr '%' . Expr                             (rule 5)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 20

State 16

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)
	Expr -> let Expr . in Expr                          (rule 10)

	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	'%'            shift, and enter state 15
	in             shift, and enter state 19


State 17

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)
	Expr -> '(' Expr . ')'                              (rule 9)

	')'            shift, and enter state 18
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	'%'            shift, and enter state 15


State 18

	Expr -> '(' Expr ')' .                              (rule 9)

	')'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'%'            reduce using rule 9
	in             reduce using rule 9
	%eof           reduce using rule 9


State 19

	Expr -> let Expr in . Expr                          (rule 10)

	int            shift, and enter state 3
	bool           shift, and enter state 4
	identifier     shift, and enter state 5
	varDec         shift, and enter state 6
	funDec         shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9

	Expr           goto state 25

State 20

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)
	Expr -> Expr '%' Expr .                             (rule 5)

	')'            reduce using rule 5
	'+'            shift, and enter state 11
			(reduce using rule 5)

	'-'            shift, and enter state 12
			(reduce using rule 5)

	'*'            shift, and enter state 13
			(reduce using rule 5)

	'/'            shift, and enter state 14
			(reduce using rule 5)

	'%'            shift, and enter state 15
			(reduce using rule 5)

	in             reduce using rule 5
	%eof           reduce using rule 5


State 21

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr '/' Expr .                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)

	')'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'%'            shift, and enter state 15
			(reduce using rule 4)

	in             reduce using rule 4
	%eof           reduce using rule 4


State 22

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr '*' Expr .                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)

	')'            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'%'            shift, and enter state 15
			(reduce using rule 3)

	in             reduce using rule 3
	%eof           reduce using rule 3


State 23

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr '-' Expr .                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)

	')'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	'%'            shift, and enter state 15
			(reduce using rule 2)

	in             reduce using rule 2
	%eof           reduce using rule 2


State 24

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr '+' Expr .                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)

	')'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	'%'            shift, and enter state 15
			(reduce using rule 1)

	in             reduce using rule 1
	%eof           reduce using rule 1


State 25

	Expr -> Expr . '+' Expr                             (rule 1)
	Expr -> Expr . '-' Expr                             (rule 2)
	Expr -> Expr . '*' Expr                             (rule 3)
	Expr -> Expr . '/' Expr                             (rule 4)
	Expr -> Expr . '%' Expr                             (rule 5)
	Expr -> let Expr in Expr .                          (rule 10)

	')'            reduce using rule 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	'%'            shift, and enter state 15
			(reduce using rule 10)

	in             reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 28
Number of non-terminals: 2
Number of states: 26
